#pragma once
#include "stdafx.h"


#define _DEBUG


// Module names
#define NAME_KERNEL				    "xboxkrnl.exe"
#define NAME_XAM				    "xam.xex"
#define NAME_XBLS				    "Base.xex"

// File names
#define NAME_CPUKEY				    "CPUKey.bin"
#define NAME_LOG					"Base.log"
#define NAME_KEYVAULT				"kv.bin"
#define NAME_KXAM_PATCHES		    "kxam.patch"
#define NAME_XOSC_DUMP				"xoscDump.bin"
#define NAME_XAM_DUMP				"xamDump.bin"

// Devices, and device paths
#define XBLS_DEVICE_NAME_HDD		"\\Device\\Harddisk0\\Partition1"
#define XBLS_DRIVE_HDD			    "HDD:\\"

#define XBLS_DIRECTORY				""

#define XBLS_DEVICE_NAME_USB			"\\Device\\Mass0"
#define XBLS_DRIVE_USB					"USB:\\"

#define XBLS_DIRECTORY_HDD				""
#define XBLS_DIRECTORY_USB				""

// File paths
#define PATH_CPUKEY_HDD				    XBLS_DRIVE_HDD XBLS_DIRECTORY_HDD NAME_CPUKEY
#define PATH_XBLS_HDD					XBLS_DRIVE_HDD XBLS_DIRECTORY_HDD NAME_XBLS
#define PATH_LOG_HDD					XBLS_DRIVE_HDD XBLS_DIRECTORY_HDD NAME_LOG

#define PATH_CPUKEY_USB				    XBLS_DRIVE_USB XBLS_DIRECTORY_USB NAME_CPUKEY
#define PATH_XBLS_USB					XBLS_DRIVE_USB XBLS_DIRECTORY_USB NAME_XBLS
#define PATH_LOG_USB					XBLS_DRIVE_USB XBLS_DIRECTORY_USB NAME_LOG

#define PATH_CPUKEY						XBLS_DRIVE_HDD XBLS_DIRECTORY NAME_CPUKEY
#define PATH_XBLS						XBLS_DRIVE_HDD XBLS_DIRECTORY NAME_XBLS
#define PATH_LOG						XBLS_DRIVE_HDD XBLS_DIRECTORY NAME_LOG

#define PATH_KXAM_PATCHES_HDD		    XBLS_DRIVE_HDD XBLS_DIRECTORY_HDD NAME_KXAM_PATCHES
#define PATH_KEYVAULT_HDD				XBLS_DRIVE_HDD XBLS_DIRECTORY_HDD NAME_KEYVAULT
#define PATH_XOSC_DUMP_HDD				XBLS_DRIVE_HDD XBLS_DIRECTORY_HDD NAME_XOSC_DUMP
#define PATH_XAM_DUMP_HDD				XBLS_DRIVE_HDD XBLS_DIRECTORY_HDD NAME_XAM_DUMP
#define PATH_CHAL_DUMP_HDD				XBLS_DRIVE_HDD XBLS_DIRECTORY_HDD NAME_CHAL_DUMP

#define PATH_KXAM_PATCHES_USB		    XBLS_DRIVE_USB XBLS_DIRECTORY_USB NAME_KXAM_PATCHES
#define PATH_KEYVAULT_USB				XBLS_DRIVE_USB XBLS_DIRECTORY_USB NAME_KEYVAULT
#define PATH_XOSC_DUMP_USB				XBLS_DRIVE_USB XBLS_DIRECTORY_USB NAME_XOSC_DUMP
#define PATH_XAM_DUMP_USB				XBLS_DRIVE_USB XBLS_DIRECTORY_USB NAME_XAM_DUMP
#define PATH_CHAL_DUMP_USB				XBLS_DRIVE_USB XBLS_DIRECTORY_USB NAME_CHAL_DUMP

// Hardcoded keys
const BYTE DeveloperKey19[0x10]		= { 0xDA, 0xB6, 0x9A, 0xD9, 0x8E, 0x28, 0x76, 0x4F, 0x97, 0x7E, 0xE2, 0x48, 0x7E, 0x4F, 0x3F, 0x68 };
const BYTE RetailKey19[0x10]		= { 0xE1, 0xBC, 0x15, 0x9C, 0x73, 0xB1, 0xEA, 0xE9, 0xAB, 0x31, 0x70, 0xF3, 0xAD, 0x47, 0xEB, 0xF3 };
const BYTE MasterKey[272] = {
    0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xDD, 0x5F, 0x49, 0x6F, 0x99, 0x4D, 0x37, 0xBB, 0xE4, 0x5B, 0x98, 0xF2, 0x5D, 0xA6, 0xB8, 0x43, 
    0xBE, 0xD3, 0x10, 0xFD, 0x3C, 0xA4, 0xD4, 0xAC, 0xE6, 0x92, 0x3A, 0x79, 0xDB, 0x3B, 0x63, 0xAF, 
    0x38, 0xCD, 0xA0, 0xE5, 0x85, 0x72, 0x01, 0xF9, 0x0E, 0x5F, 0x5A, 0x5B, 0x08, 0x4B, 0xAD, 0xE2, 
    0xA0, 0x2A, 0x42, 0x33, 0x85, 0x34, 0x53, 0x83, 0x1E, 0xE5, 0x5B, 0x8F, 0xBF, 0x35, 0x8E, 0x63, 
    0xD8, 0x28, 0x8C, 0xFF, 0x03, 0xDC, 0xC4, 0x35, 0x02, 0xE4, 0x0D, 0x1A, 0xC1, 0x36, 0x9F, 0xBB, 
    0x90, 0xED, 0xDE, 0x4E, 0xEC, 0x86, 0x10, 0x3F, 0xE4, 0x1F, 0xFD, 0x96, 0xD9, 0x3A, 0x78, 0x25, 
    0x38, 0xE1, 0xD3, 0x8B, 0x1F, 0x96, 0xBD, 0x84, 0xF6, 0x5E, 0x2A, 0x56, 0xBA, 0xD0, 0xA8, 0x24, 
    0xE5, 0x02, 0x8F, 0x3C, 0xA1, 0x9A, 0xEB, 0x93, 0x59, 0xD7, 0x1B, 0x99, 0xDA, 0xC4, 0xDF, 0x7B, 
    0xD0, 0xC1, 0x9A, 0x12, 0xCC, 0x3A, 0x17, 0xBF, 0x6E, 0x4D, 0x78, 0x87, 0xD4, 0x2A, 0x7F, 0x6B, 
    0x9E, 0x2F, 0xCD, 0x8D, 0x4E, 0xF5, 0xCE, 0xC2, 0xA0, 0x5A, 0xA3, 0x0F, 0x9F, 0xAD, 0xFE, 0x12, 
    0x65, 0x74, 0x20, 0x6F, 0xF2, 0x5C, 0x52, 0xE4, 0xB0, 0xC1, 0x3C, 0x25, 0x0D, 0xAE, 0xD1, 0x82, 
    0x7C, 0x60, 0xD7, 0x44, 0xE5, 0xCD, 0x8B, 0xEA, 0x6C, 0x80, 0xB5, 0x1B, 0x7A, 0x0C, 0x02, 0xCE, 
    0x0C, 0x24, 0x51, 0x3D, 0x39, 0x36, 0x4A, 0x3F, 0xD3, 0x12, 0xCF, 0x83, 0x8D, 0x81, 0x56, 0x00, 
    0xB4, 0x64, 0x79, 0x86, 0xEA, 0xEC, 0xB6, 0xDE, 0x8A, 0x35, 0x7B, 0xAB, 0x35, 0x4E, 0xBB, 0x87, 
    0xEA, 0x1D, 0x47, 0x8C, 0xE1, 0xF3, 0x90, 0x13, 0x27, 0x97, 0x55, 0x82, 0x07, 0xF2, 0xF3, 0xAA, 
    0xF9, 0x53, 0x47, 0x8F, 0x74, 0xA3, 0x8E, 0x7B, 0xAE, 0xB8, 0xFC, 0x77, 0xCB, 0xFB, 0xAB, 0x8A
};

const BYTE PROD_INI[71] =
{
    0x4E, 0x45, 0x54, 0x57, 0x4F, 0x52, 0x4B, 0x49, 0x44, 0x3A, 0x50, 0x52, 0x4F, 0x44, 0x0D, 0x0A, 
    0x46, 0x4F, 0x52, 0x43, 0x45, 0x4D, 0x4B, 0x44, 0x43, 0x3A, 0x54, 0x52, 0x55, 0x45, 0x0D, 0x0A, 
    0x5B, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x73, 0x5D, 0x0D, 0x0A, 
    0x43, 0x4C, 0x55, 0x53, 0x54, 0x45, 0x52, 0x3D, 0x50, 0x72, 0x6F, 0x64, 0x75, 0x63, 0x74, 0x69, 
    0x6F, 0x6E, 0x4E, 0x65, 0x74, 0x0D, 0x0A
};

typedef struct _XAM_CHAL_RESP {
	BYTE bReserved1[8];                            //0x0
	WORD wHvMagic;                                 //0x8
	WORD wHvVersion;                               //0xA
	WORD wHvQfe;                                   //0xC
	WORD wBldrFlags;                               //0xE
	DWORD dwBaseKernelVersion;                     //0x10
	DWORD dwUpdateSequence;                        //0x14
	DWORD dwHvKeysStatusFlags;                     //0x18
	DWORD dwConsoleTypeSeqAllow;                   //0x1C
	QWORD qwRTOC;                                  //0x20
	QWORD qwHRMOR;                                 //0x28
	BYTE bHvECCDigest[XECRYPT_SHA_DIGEST_SIZE];    //0x30
	BYTE bCpuKeyDigest[XECRYPT_SHA_DIGEST_SIZE];   //0x44
	BYTE bRandomData[0x80];                        //0x58
	WORD hvExAddr;                                 //0xD8 (bits 16-32 of hvex executing addr)
	BYTE bHvDigest[0x6];                           //0xDA (last 6 bytes of first hv hash)
} XAM_CHAL_RESP, *PXAM_CHAL_RESP;